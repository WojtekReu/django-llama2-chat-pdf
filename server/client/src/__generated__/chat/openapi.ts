/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/chat/chroma/heartbeat": {
    /**
     * Chroma Heartbeat
     * @description From chromadb get the current time in nanoseconds since epoch.
     * Used to check if the chroma service is alive.
     */
    get: operations["chat_apis_chroma_chroma_heartbeat"];
  };
  "/api/chat/chroma/list": {
    /**
     * List Collections
     * @description Return a list of all collections.
     */
    get: operations["chat_apis_chroma_list_collections"];
  };
  "/api/chat/chroma/{collection}": {
    /** Chroma Get */
    get: operations["chat_apis_chroma_chroma_get"];
    /**
     * Chroma Delete
     * @description Deletes the contents of the collection
     */
    delete: operations["chat_apis_chroma_chroma_delete"];
  };
  "/api/chat/upload/{room_uuid}": {
    /** Upload File */
    post: operations["chat_apis_chat_upload_file"];
  };
  "/api/chat/files/{room_uuid}": {
    /** Get Files */
    get: operations["chat_apis_chat_get_files"];
  };
  "/api/chat/file/{room_uuid}/{file_uuid}": {
    /** Delete Files */
    delete: operations["chat_apis_chat_delete_files"];
  };
  "/api/chat/stream_chat/{room_uuid}": {
    /** Get Stream Chat */
    get: operations["chat_apis_chat_get_stream_chat"];
  };
  "/api/chat/messages/{room_uuid}": {
    /** Get Messages */
    get: operations["chat_apis_chat_get_messages"];
    /** Set Messages */
    post: operations["chat_apis_chat_set_messages"];
  };
  "/api/chat/message/{room_uuid}": {
    /** Set User Message */
    post: operations["chat_apis_chat_set_user_message"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** DocumentFileSchema */
    DocumentFileSchema: {
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Url */
      url: string;
      /** Name */
      name: string;
      /** Sha256 */
      sha256?: string;
    };
    /**
     * MessageType
     * @description An enumeration.
     * @enum {string}
     */
    MessageType: "USER" | "SYSTEM" | "CONTEXT" | "LLM";
    /** Message */
    Message: {
      role: components["schemas"]["MessageType"];
      /** Content */
      content: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Chroma Heartbeat
   * @description From chromadb get the current time in nanoseconds since epoch.
   * Used to check if the chroma service is alive.
   */
  chat_apis_chroma_chroma_heartbeat: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /**
   * List Collections
   * @description Return a list of all collections.
   */
  chat_apis_chroma_list_collections: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Chroma Get */
  chat_apis_chroma_chroma_get: {
    parameters: {
      path: {
        collection: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /**
   * Chroma Delete
   * @description Deletes the contents of the collection
   */
  chat_apis_chroma_chroma_delete: {
    parameters: {
      path: {
        collection: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Upload File */
  chat_apis_chat_upload_file: {
    parameters: {
      path: {
        room_uuid: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * File
           * Format: binary
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentFileSchema"][];
        };
      };
    };
  };
  /** Get Files */
  chat_apis_chat_get_files: {
    parameters: {
      path: {
        room_uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentFileSchema"][];
        };
      };
    };
  };
  /** Delete Files */
  chat_apis_chat_delete_files: {
    parameters: {
      path: {
        room_uuid: string;
        file_uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentFileSchema"][];
        };
      };
    };
  };
  /** Get Stream Chat */
  chat_apis_chat_get_stream_chat: {
    parameters: {
      path: {
        room_uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Get Messages */
  chat_apis_chat_get_messages: {
    parameters: {
      path: {
        room_uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Set Messages */
  chat_apis_chat_set_messages: {
    parameters: {
      path: {
        room_uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Message"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Set User Message */
  chat_apis_chat_set_user_message: {
    parameters: {
      path: {
        room_uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Message"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
}
